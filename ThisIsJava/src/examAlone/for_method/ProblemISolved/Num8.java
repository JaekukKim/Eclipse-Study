package examAlone.for_method.ProblemISolved;

public class Num8 {
	public static void main(String[] args) {
		// 1부터 10000까지 정수에는 8이라는 숫자가 몇번(횟수) 나오는지 구하시오
		// 8로 나누어 떨어지는 수를 구하기엔 8의 배수도 전부 카운팅된다.
		// 8 자체를 대입하는 방법을 구해야한다.
		// 10으로 나누었을때 나머지가 8이면 8이 포함되는 수이다.

		int count = 0; // 8이 나오면 카운팅시키는 변수 생성
		int x = 0; // 작업 대상이 되는 수를 저장함, i값 저장

		for (int i = 1; i <= 10000; i++) {
			x = i;
			// 작업 대상이 되는 수 i를 일단 저장한다. 저장을 하는 이유는 x값을 변환시켜서 뭘 하려는게 아닌
			// 단순히 기억의 도구로 쓰는 용도이다.
			// for문은 i를 가지고 도는데 계속 i가 바뀌면 뭘 갖고 for문의 내부를 도는지 알 수 없다.
			// 그래서 x라는 다른 변수를 사용하여 이 변수를 "가지고 돌 수 있도록" 해 주는 것이다.

			while (i >= 10) { // 2. 그리고 10 이상일때부터 본격적으로 수를 센다.
				if (i % 10 == 8) { // 10으로 나누어서 8이 남는다면 8이 포함되어 있는 수이다.
					count++; // 그리고 갯수를 세서 저장 해 준 뒤.
					i = i / 10; // 1의 자리를 날려버린다.
				} else { // 10으로 나누어서 나머지가 8이 되지 않는다면
					i = i / 10; // 그냥 날려버린다.
					continue;
				}
			}

			if (i == 8) { // 1. 1의 자리 먼저 해결을 한다, 1의 자리에 8이 들어가는 경우는 1번밖에 없기때문.
				count++;
			}

			i = x;
			// 작업이 끝나면 원래 변수에 저장한다. 작업이 끝나면 i값에 x를 다시 넣어줘서 x를 다시 도구로 쓸 수 있게 만들어준다.
		}
		System.out.println("1~10000까지 8의 갯수는 ? : " + count);

		System.out.println("====다른방법====");

		// 중복되는 부분을 줄여서 더 짧고 간결하게.

		count = 0;
		x = 0;

		for (int i = 1; i <= 10000; i++) {
			x = i;
			while (i > 0) {
				if (i % 10 == 8) {
					// i가 10으로 나눈 나머지이므로 8도 카운팅이 가능하다! 위에선 if문으로 8을 따로 세어준거랑은 다른 방법이다.
					count++;
				}
				i /= 10;
				// i를 나누어서 8이 남지 않는다면 10으로 나눈 몫을 구해버린다.
			}
			i = x;

		}
		System.out.println("1~10000까지 8의 갯수는 ? : " + count);

	}

}
// 내가 쓴 원시적인 방법
// 		int count = 0; // 8이 나오면 카운팅시키는 변수 생성
// 		int x = 0; // 작업 대상이 되는 수를 저장함, i값 저장
// 		int n = 10;
//
// 	for (int i = 1; i <= 10000; i++ ) {
// 	if (i%10==8) {
//	      count++;
//	      x = ((i/n)*8);
//	      count++;
//	      x = ((i/n*10)*8);
//	      count++;
//	      x = ((i/n*100)*8);
//	      count++;
// }