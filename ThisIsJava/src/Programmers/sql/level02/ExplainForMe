	
	여기선 프로그래머스 sql문제의 level2에서 새로 나온 개념들을 정리 할 것이다.
	level1과 겹치는 개념이 생각보다 많다.
	시작해보자
	
	//Exam01
	COUNT = 말그대로 카운트 하는 문법이다. 보통 SELECT COUNT(컬럼명) 으로 많이 쓰며 그 컬럼에 속한 데이터의 갯수를 보여준다
	
	//Exam03
	**
	LIKE = 특정 문자열을 찾는 문법이다
	
	SELECT [컬럼명] FROM [테이블명] WHERE [컬럼명] LIKE '특정문자열%'
	-> "문자"% = "문자"로 시작하는 모든 데이터를 조회
	-> %"문자" = "문자"로 끝나는 모든 데이터를 조회
	
	SELECT [컬럼명] FROM [테이블명] WHERE [컬럼명] LIKE '%특정문자열%'
	-> %"특정문자"% = "특정문자"가 포함된 모든 데이터를 조회
	
	SELECT [컬럼명] FROM [테이블명] WHERE [컬럼명] LIKE '특정문자열?'
	-> "문자"? = "문자" + 외자 인 모든 데이터를 조회.
	**
	
	//Exam04
	**
	GROUP BY를 사용할 때는 두가지를 기억해야 한다.
	특정 컬럼을 그룹화 하는 GROUP BY
	특정 컬럼을 그룹화한 결과에 조건을 거는 HAVING
	
	* WHERE랑 HAVING을 혼동하는 경우가 많은데 WHERE는 그룹화 하기 전이고, HAVING은 그룹화 후에 조건이다.
	
	컬럼 그룹화
	SELECT 컬럼
	FROM 테이블
	GROUP BY 그룹화할 컬럼
	
	조건 처리 후에 컬럼 그룹화
	SELECT 컬럼
	FROM 테이블
	WHERE 조건식 //WHERE는 그룹화 하기 전에 쓰임
	GROUP BY 그룹화할 컬럼
	
	컬럼 그룹화 후에 조건 처리
	SELECT 컬럼
	FROM 테이블
	GROUP BY 그룹화할 컬럼
	HAVING 조건식 //HAVING는 그룹화 이후에 쓰임
	
	중복 문자 카운팅
	SELECT 컬럼, COUNT(컬럼)
	FROM 테이블
	GROUP BY 그룹화할 컬럼
	HAVING COUNT (그룹화한 컬럼) > 1 //>1은 중복된 값만 출력할때 붙여준다.
	
	조건 처리 후에 컬럼 그룹화 후에 조건 처리
	SELECT 컬럼
	FROM 테이블
	WHERE 조건식
	GROUP BY 그룹화할 컬럼
	HAVING 조건식
	**
	
	//Exam05
	**
	IFNULL(?, ?)
	1. 컬럼이 NULL이면 0으로 치환하여 반환
	-> SELECT IFNULL(컬럼명, 0) FROM 테이블명

	2. 컬럼이 NULL이면 -- 으로 치환하여 반환
	-> SELECT IFNULL(컬럼명, '--') FROM 테이블명
	**
	
	//Exam06
	** DATE_FORMAT(포맷을 변경하고 싶은 값, 변경하고 싶은 날짜 타입) AS "바꾸고싶은컬럼명"
				   포맷을 변경하고 싶은 값에는 칼럼명도 들어간다. AS뒤에 쓴 "컬럼명"을 입력하면 컬럼이 바꾼 이름으로 출력된다.
	
	//날짜 타입 종류 (대소문자 구별 필수!!)
	
	지정값	구분		표시형식
	%Y		연		4자리 연도
	%y		연		2자리 연도
	%m		월		2자리 (00-12)
	%c		월		1자리, 10보다 작을경우 (1-12)
	%M		월		이름(January, February…)
	%b		월		줄인 이름(Jan, Feb…)
	%d		일		2자리 (00-31)
	%e		일		1자리, 10보다 작을경우 (0-31)
	%D		일		1st, 2nd…
	%H		시		24시간 형식 (00-23)
	%h		시		12시간 형식 (01-12)
	%I		시		12시간 형식 (01-13)
	%k		시		24시간 형식, 10보다 작을경우 한자리 (0-23)
	%l		시		12시간 형식, 10보다 작을경우 한자리 (1-12)
	%i		분		2자리 (00-59)
	%S		초		2자리 (00-59)
	%s		초		2자리 (00-59)
	%f		마이크로초	100만분의 1초
	%p		오전/오후	AM/PM
	%T		시분초	24시간 형식 (hh:mm:ss)
	%r		시분초 	오전/오후	12시간 형식 (hh:mm:ss AM/PM)
	%j		일		그해의 몇번째 일인지 표시 (001-366)
	%w		일		그주의 몇번째 일인지 표시 (0=일요일, 6=토요일)
	%W		주		이름(Monday,Tuesday…)
	%a		주		줄인 이름(Mon,Tue…) 
	%U		주		그해의 몇번째 주인지 표시 (00-53) 일요일이 주의 첫번째일
	%u		주		그해의 몇번째 주인지 표시 (00-54) 월요일이 주의 첫번째일
	%X		연		그주가 시작된 해을 표시, %V와 같이 사용
	%x		연		그주가 시작된 해을 표시, %v와 같이 사용
	%V		주		그주가 시작된 해의 몇번째 주인지 표시 (01-53)
					일요일이 주의 첫번째일 %X 와 함께사용
	%v		주		그주가 시작된 해의 몇번째 주인지 표시 (01-53)
					월요일이 주의 첫번째일 %x 와 함께사용
	**
	
	//Exam07
	REPLACE(컬럼명, "기존문자", "바꿀문자") 로 '단일문자열'은 치환이 가능하다. 하지만 다중이라면 어떨까?
	REPLACE(REPLACE(REPLACE(컬럼명, "기존문자", "바꿀문자"),"기존문자", "바꿀문자"),"기존문자", "바꿀문자")
	의 식으로 너무나도 복잡하게 치환해주어야 한다....
	그래서 나온게 CASE WHEN THEN ELSE END (AS는선택사항) 이다.
	
	CASE 
		WHEN 컬럼명 = '기존문자'
		THEN '바꿀문자'
		....
		ELSE 그이외 것들의 '바꾸고싶은문자'
		END (AS~)
	FROM 테이블명
		의 식으로 작성해주면 WHEN에 걸려있는 조건들이 실행되면서 깔끔하게 가능하다!
	**
	
	//Exam09
	WHERE 컬럼명 IN ('1번문자열','2번문자열', ... 'N번문자열')
	IN()은 괄호 안에 있는 문자열이나 찾고싶은 값들을 찾아서 뽑아내는 역할을 하는 문법이다.