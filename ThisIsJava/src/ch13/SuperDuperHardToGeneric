	영어 단어만 알고가도 절반이상은 해먹는다는 점을 다시한번 깨닫는다.
	
	제네릭 (Generic) - 포괄적인, 일반적인.
	
	자바에서 쓰이는 의미는 포괄적인이라는 의미가 더 근접하지 않을까? 라는 생각이 든다.
	
	코드로 한번 보자
	
	class Person<T> {
		public <T> info;
	}
	
	1. Person <String> per = new Person <String> ();
	2. Person <Integer> per2 = new Person <Integer> ();
	
	그 전에 쓰던 방식과는 매우 많이 다르다. 일단 <> 괄호가 새로 추가되었으며 무슨 이상한 대문자가 들어가고
	String 클래스와 Integer 클래스가 들어갔다.
	
	맨 위의 <T> 부터 살펴보자. <T>는 타입 파라미터(매개변수)라는 의미이다. 매개변수는 많이 들어봤는데 타입?? 왜 타입이 들어가지? 라는 의문점이 들 수도 있다.
	조금만 더 생각해본다면 아랫줄의 String클래스와 Integer클래스를 보고 알 수 있다.
	바로 타입 파라미터의 자리에는 "특정 클래스 타입"이 들어간다는 것이다. 클래스 타입은 전에 Object클래스에서 배웠다.
	
	우리가 코딩을 하면서 일일히 타입을 지정해주는건 어쩌면 번거로운 일일지도 모른다. 현업에선 최소 몇천줄 최대 몇만줄이 되는 코드를 수없이 짤 텐데
	거기서 일일히 변수의 타입을 지정해준다는건 지식노동과 단순노동의 안좋은점만 뽑아다 극대화시키는 역시너지가 날수도 있기 때문이다.
	그래서 우리는 처음에 "타입"을 "포괄적으로" 정해 준 뒤 클래스 내부에서 인스턴스를 "생성" 할 때 "타입"을 "확정"하는 제네릭이라고 하는 기법을 쓴다.
	
	제네릭은 데이터 타입의 "변수"의 데이터 타입과 관련이 있다!!
	
	자 다시 위의 코드를 보자. Person이라고 하는 클래스의 데이터 타입은 <T>이다. 그리고 Person 클래스를 객체화 시킬때
	1번 객체는 String의 데이터 타입을 가지는 객체가 생성되는 것이고
	2번 객체는 Integer의 데이터 타입을 가지는 객체가 생성되는 것이다!